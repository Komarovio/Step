"""
Дано целое число 1≤n≤10^3 и массив A[1…n] натуральных чисел, не превосходящих 2⋅10^9. Выведите максимальное 1≤k≤n, 
для которого найдётся подпоследовательность n1≤i1<i2<…<ik≤n длины k, в которой каждый элемент делится на предыдущий 
(формально: для всех 1≤j<k, A[ij]∣A[ij+1]).

Sample Input:
4
3 6 7 12
Sample Output:
3
"""

def sub_sequence(arr):
    # размер массива
    n = len(arr)
    # создаем список для записи количества чисел подпоследовательности
    d = [0 for m in range(n)]
    # создаем список для индексов массива
    p = [0 for m in range(n)]
    # пробегаем по всей длине массива
    for i in range(n):
        d[i] = 1
        p[i] = -1
        j = 0
        while j < i:
            # если элемент ранее меньше нынешнего и количество чисел становится больше и число делится
            if arr[j] <= arr[i] and d[j] + 1 > d[i] and arr[i] % arr[j] == 0:
                d[i] = d[j] + 1
                p[i] = j
            j += 1
    res = d[0]
    # находим максимальное число последовательности
    for i in range(n):
        if d[i] > res:
            res = d[i]
    print(res)


def main():
    n = int(input())
    arr = list(map(int, input().split()))
    sub_sequence(arr)


if __name__ == "__main__":
    main()
